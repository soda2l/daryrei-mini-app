#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
"""

import json
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
CATALOG_FILE = "catalog.json"

def load_catalog():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        if os.path.exists(CATALOG_FILE):
            with open(CATALOG_FILE, 'r', encoding='utf-8') as f:
                catalog = json.load(f)
            return catalog
        else:
            return {"categories": [], "products": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return {"categories": [], "products": []}

def test_categories_structure():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏...")
    
    catalog = load_catalog()
    categories = catalog.get("categories", [])
    products = catalog.get("products", [])
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    if not categories:
        print("‚ùå –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π!")
        print("üîß –†–µ—à–µ–Ω–∏–µ: –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
        return False
    
    print(f"\nüìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥–µ:")
    for i, category in enumerate(categories, 1):
        print(f"   {i}. ID: {category.get('id', '–ù–µ—Ç ID')}")
        print(f"      –ù–∞–∑–≤–∞–Ω–∏–µ: {category.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
        print(f"      –û–ø–∏—Å–∞–Ω–∏–µ: {category.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
        print()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —Ç–æ–≤–∞—Ä–æ–≤ –µ—Å—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    products_with_categories = [p for p in products if p.get('category')]
    products_without_categories = [p for p in products if not p.get('category')]
    
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏: {len(products_with_categories)}")
    print(f"üì¶ –¢–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {len(products_without_categories)}")
    
    if products_without_categories:
        print("‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ç–æ–≤–∞—Ä—ã –±–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
        for product in products_without_categories:
            print(f"   - {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} (ID: {product.get('id', '–ù–µ—Ç ID')})")
    
    return True

def test_js_categories_logic():
    """–¢–µ—Å—Ç –ª–æ–≥–∏–∫–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ JS"""
    print(f"\nüîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ JavaScript:")
    print(f"1. ‚úÖ –ò–∑–º–µ–Ω–µ–Ω const categories –Ω–∞ let categories")
    print(f"2. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –≤ loadCatalog()")
    print(f"3. ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ fallback –¥–∞–Ω–Ω—ã—Ö")
    print(f"4. ‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–µ–ø–µ—Ä—å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è —Å —Å–µ—Ä–≤–µ—Ä–∞")
    
    print(f"\nüìã –õ–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π:")
    print(f"1. –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞ —Å —Å–µ—Ä–≤–µ—Ä–∞:")
    print(f"   - categories = ['all']")
    print(f"   - catalog.categories.forEach(category => categories.push(category.id))")
    print(f"2. –ü—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ fallback –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   - categories = ['all']")
    print(f"   - catalog.categories.forEach(category => categories.push(category.id))")
    
    return True

def test_category_usage():
    """–¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π"""
    print(f"\nüéØ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")
    print(f"1. –°–≤–∞–π–ø—ã –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    print(f"2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
    print(f"3. –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö")
    
    print(f"\nüì± –í –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏:")
    print(f"1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç —Å–≤–∞–π–ø–∞—Ç—å –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    print(f"2. –¢–æ–≤–∞—Ä—ã —Ñ–∏–ª—å—Ç—Ä—É—é—Ç—Å—è –ø–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏")
    print(f"3. –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å —Å–µ—Ä–≤–µ—Ä–∞")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    print("=" * 60)
    
    success1 = test_categories_structure()
    success2 = test_js_categories_logic()
    success3 = test_category_usage()
    
    if success1 and success2 and success3:
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞: python bot.py")
        print(f"2. –î–æ–±–∞–≤—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å: /admin")
        print(f"3. –ü—Ä–æ–≤–µ—Ä—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ - –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è")
        print(f"4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π —Å–≤–∞–π–ø—ã –º–µ–∂–¥—É –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏")
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")
        print(f"\nüîß –ß—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å:")
        if not success1:
            print(f"1. –î–æ–±–∞–≤—å—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥")
        if not success2:
            print(f"2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤ JavaScript")
        if not success3:
            print(f"3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π")

if __name__ == "__main__":
    main()
