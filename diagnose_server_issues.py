#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
"""

import json
import os
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
SERVER_API_URL = "https://daryreibot.duckdns.org/api/catalog"
LOCAL_CATALOG_FILE = "catalog.json"

def check_server_connectivity():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...")
    
    try:
        response = requests.get(SERVER_API_URL, timeout=10)
        if response.status_code == 200:
            print("‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        else:
            print(f"‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: HTTP {response.status_code}")
            return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É: {e}")
        return False

def check_server_catalog():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ"""
    print("\nüì¶ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ...")
    
    try:
        response = requests.get(SERVER_API_URL, timeout=10)
        if response.status_code == 200:
            catalog = response.json()
            products_count = len(catalog.get('products', []))
            categories_count = len(catalog.get('categories', []))
            
            print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω —Å —Å–µ—Ä–≤–µ—Ä–∞:")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
            print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤
            if products_count > 0:
                print("\nüìã –ü–µ—Ä–≤—ã–µ —Ç–æ–≤–∞—Ä—ã:")
                for i, product in enumerate(catalog.get('products', [])[:3]):
                    print(f"   {i+1}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {product.get('price', '–ë–µ–∑ —Ü–µ–Ω—ã')} ‚ÇΩ")
            
            return catalog
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: HTTP {response.status_code}")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return None

def check_local_catalog():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥"""
    print("\nüíæ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞...")
    
    try:
        if os.path.exists(LOCAL_CATALOG_FILE):
            with open(LOCAL_CATALOG_FILE, 'r', encoding='utf-8') as f:
                catalog = json.load(f)
            
            products_count = len(catalog.get('products', []))
            categories_count = len(catalog.get('categories', []))
            
            print(f"‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞–π–¥–µ–Ω:")
            print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {products_count}")
            print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {categories_count}")
            
            return catalog
        else:
            print("‚ùå –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return None

def check_image_files():
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    print("\nüñºÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
    
    images_dir = "images"
    if os.path.exists(images_dir):
        image_files = [f for f in os.listdir(images_dir) if f.lower().endswith(('.jpg', '.jpeg', '.png', '.gif'))]
        print(f"‚úÖ –ü–∞–ø–∫–∞ images –Ω–∞–π–¥–µ–Ω–∞: {len(image_files)} —Ñ–∞–π–ª–æ–≤")
        
        if image_files:
            print("üìã –ü–µ—Ä–≤—ã–µ —Ñ–∞–π–ª—ã:")
            for i, file in enumerate(image_files[:5]):
                print(f"   {i+1}. {file}")
        else:
            print("‚ö†Ô∏è –í –ø–∞–ø–∫–µ images –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    else:
        print("‚ùå –ü–∞–ø–∫–∞ images –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

def check_catalog_consistency(local_catalog, server_catalog):
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥–æ–≤"""
    print("\nüîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤...")
    
    if not local_catalog or not server_catalog:
        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏")
        return
    
    local_products = {p['id']: p for p in local_catalog.get('products', [])}
    server_products = {p['id']: p for p in server_catalog.get('products', [])}
    
    local_only = set(local_products.keys()) - set(server_products.keys())
    server_only = set(server_products.keys()) - set(local_products.keys())
    
    if not local_only and not server_only:
        print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
    else:
        print(f"‚ö†Ô∏è –ù–∞–π–¥–µ–Ω—ã —Ä–∞–∑–ª–∏—á–∏—è:")
        if local_only:
            print(f"   üì± –¢–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º: {len(local_only)} —Ç–æ–≤–∞—Ä–æ–≤")
        if server_only:
            print(f"   üåê –¢–æ–ª—å–∫–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ: {len(server_only)} —Ç–æ–≤–∞—Ä–æ–≤")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    server_available = check_server_connectivity()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–∞–ª–æ–≥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    server_catalog = None
    if server_available:
        server_catalog = check_server_catalog()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    local_catalog = check_local_catalog()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    check_image_files()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–Ω–æ—Å—Ç—å –∫–∞—Ç–∞–ª–æ–≥–æ–≤
    if local_catalog and server_catalog:
        check_catalog_consistency(local_catalog, server_catalog)
    
    print("\nüìã –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
    
    if not server_available:
        print("1. ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. üîß –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
        print("3. üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL —Å–µ—Ä–≤–µ—Ä–∞")
    
    if not local_catalog:
        print("1. üíæ –°–æ–∑–¥–∞–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥")
        print("2. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
    
    if local_catalog and server_catalog:
        local_only = set(p['id'] for p in local_catalog.get('products', [])) - set(p['id'] for p in server_catalog.get('products', []))
        if local_only:
            print("1. üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–π—Ç–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º")
            print("2. üì§ –°–∫–æ–ø–∏—Ä—É–π—Ç–µ catalog.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    
    print("\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ sync_catalog.bat –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
    print("2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –±–æ—Ç–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ")
    print("3. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ")

if __name__ == "__main__":
    main()
