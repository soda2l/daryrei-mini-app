#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import logging
import json
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, MessageHandler, filters, ContextTypes
import os
from dotenv import load_dotenv
from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import uvicorn
import asyncio
from threading import Thread

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "8121877943:AAEPprLrwI627XQd9Al7CQGTLvQtyopRKcE")

# ID –≥—Ä—É–ø–ø—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∑–∞–∫–∞–∑–æ–≤
ORDER_GROUP_ID = "-1003025937033"

class DaryReiBot:
    def __init__(self):
        self.application = Application.builder().token(BOT_TOKEN).build()
        self.setup_handlers()
        self.setup_error_handlers()
        self.setup_http_server()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("catalog", self.catalog_command))
        self.application.add_handler(CommandHandler("test", self.test_command))
        self.application.add_handler(CommandHandler("debug", self.debug_command))
        self.application.add_handler(CommandHandler("webapp", self.webapp_test_command))
        self.application.add_handler(CommandHandler("testwebapp", self.test_webapp_data_command))
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–π)
        self.application.add_handler(MessageHandler(filters.StatusUpdate.WEB_APP_DATA, self.handle_web_app_data))
        
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ WebApp –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_text_message))
        
        # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏) - –ø–æ—Å–ª–µ–¥–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.ALL, self.handle_all_messages))
    
    def setup_error_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –æ—à–∏–±–æ–∫"""
        self.application.add_error_handler(self.error_handler)
    
    def setup_http_server(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        self.http_app = FastAPI(title="DaryRei Bot API", version="1.0.0")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è WebApp
        self.http_app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –ª—É—á—à–µ —É–∫–∞–∑–∞—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –¥–æ–º–µ–Ω—ã
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã
        self.http_app.post("/api/order")(self.handle_order_request)
        self.http_app.get("/api/health")(self.health_check)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º HTTP —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.http_thread = Thread(target=self.run_http_server, daemon=True)
        self.http_thread.start()
    
    def run_http_server(self):
        """–ó–∞–ø—É—Å–∫ HTTP —Å–µ—Ä–≤–µ—Ä–∞"""
        port = int(os.getenv("PORT", 8000))
        uvicorn.run(self.http_app, host="0.0.0.0", port=port, log_level="info", access_log=False)
    
    async def health_check(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        return {"status": "ok", "message": "DaryRei Bot API is running"}
    
    async def handle_order_request(self, order_data: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞ –æ—Ç WebApp"""
        try:
            logger.info(f"=== –ü–û–õ–£–ß–ï–ù HTTP –ó–ê–ü–†–û–° –ó–ê–ö–ê–ó–ê ===")
            logger.info(f"Order data: {order_data}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
            if not order_data.get('message'):
                raise HTTPException(status_code=400, detail="Message is required")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
            await self.send_order_to_group_http(order_data)
            
            return {"status": "success", "message": "Order sent successfully"}
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ HTTP –∑–∞–∫–∞–∑–∞: {e}")
            raise HTTPException(status_code=500, detail=str(e))
    
    async def send_order_to_group_http(self, order_data: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ HTTP API"""
        try:
            message = order_data.get('message', '')
            group_id = order_data.get('groupId', ORDER_GROUP_ID)
            
            logger.info(f"=== –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê –í –ì–†–£–ü–ü–£ –ß–ï–†–ï–ó HTTP ===")
            logger.info(f"Message length: {len(message)}")
            logger.info(f"Group ID: {group_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –±–æ—Ç–∞ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            bot = self.application.bot
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            sent_message = await bot.send_message(
                chat_id=group_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_id}")
            logger.info(f"Sent message ID: {sent_message.message_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É —á–µ—Ä–µ–∑ HTTP: {e}")
            raise
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        welcome_text = """üïØ –ú–∞–≥–∞–∑–∏–Ω –∞–≤—Ç–æ—Ä—Å–∫–∏—Ö —Å–≤–µ—á–µ–π DaryRei

‚ú® –£—é—Ç, –∞—Ä–æ–º–∞—Ç –∏ —Ç–µ–ø–ª–æ –≤ –∫–∞–∂–¥–æ–π —Å–≤–µ—á–µ.

–ù–∞–∂–º–∏—Ç–µ –°—Ç–∞—Ä—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É üî•"""
        
        keyboard = [
            [InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –ø–æ–∫—É–ø–∫–∏", callback_data="start_shopping")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_text, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/catalog - –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤
/test - –¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É
/webapp - –¢–µ—Å—Ç WebApp
/testwebapp - –¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö
/debug - –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        await update.message.reply_text(help_text)
    
    async def test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            test_message = "üß™ –¢–ï–°–¢: –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø—É"
            await context.bot.send_message(
                chat_id=ORDER_GROUP_ID,
                text=test_message
            )
            await update.message.reply_text(f"‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –≥—Ä—É–ø–ø—É {ORDER_GROUP_ID}")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    
    async def debug_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑"""
        try:
            test_order = """üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó

üë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @test_user

üì¶ –¢–æ–≤–∞—Ä—ã:
‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è —Å–≤–µ—á–∞ - 1 —à—Ç. √ó 1000 ‚ÇΩ = 1000 ‚ÇΩ

üí∞ –ò—Ç–æ–≥–æ: 1000 ‚ÇΩ
üöö –î–æ—Å—Ç–∞–≤–∫–∞: 300 ‚ÇΩ

üìÖ –î–∞—Ç–∞: 16.09.2025, 20:53:57"""
            
            await context.bot.send_message(
                chat_id=ORDER_GROUP_ID,
                text=test_order,
                parse_mode='HTML'
            )
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É")
        except Exception as e:
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")
            logger.error(f"–û—à–∏–±–∫–∞ debug –∫–æ–º–∞–Ω–¥—ã: {e}")
    
    async def webapp_test_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ WebApp"""
        keyboard = [
            [InlineKeyboardButton("üß™ –¢–µ—Å—Ç WebApp", web_app=WebAppInfo(url="https://soda2l.github.io/daryrei-mini-app/"))]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è WebApp. –ï—Å–ª–∏ WebApp —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—ã —É–≤–∏–¥–∏—Ç–µ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ.",
            reply_markup=reply_markup
        )
    
    async def test_webapp_data_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ WebApp –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
            test_data = {
                "type": "order",
                "message": "üõí –¢–ï–°–¢–û–í–´–ô –ó–ê–ö–ê–ó\n\nüë§ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @test_user\n\nüì¶ –¢–æ–≤–∞—Ä—ã:\n‚Ä¢ –¢–µ—Å—Ç–æ–≤–∞—è —Å–≤–µ—á–∞ - 1 —à—Ç. √ó 1000 ‚ÇΩ = 1000 ‚ÇΩ\n\nüí∞ –ò—Ç–æ–≥–æ: 1000 ‚ÇΩ\nüöö –î–æ—Å—Ç–∞–≤–∫–∞: 300 ‚ÇΩ\n\nüìÖ –î–∞—Ç–∞: " + str(context.bot_data.get('current_time', '—Ç–µ—Å—Ç')),
                "groupId": ORDER_GROUP_ID
            }
            
            # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp
            logger.info("=== –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –û–ë–†–ê–ë–û–¢–ö–ò WEBAPP –î–ê–ù–ù–´–• ===")
            logger.info(f"Test data: {test_data}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
            await self.send_order_to_group(update, context, test_data)
            
            await update.message.reply_text("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ WebApp –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –≥—Ä—É–ø–ø—É")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥–µ WebApp: {e}")
            await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}")
    
    async def catalog_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /catalog"""
        await self.show_main_menu(update, context)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        keyboard = [
            [InlineKeyboardButton("‚ÑπÔ∏è –û –Ω–∞—Å", callback_data="about_us")],
            [InlineKeyboardButton("üì¢ –ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª", callback_data="main_channel")],
            [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", callback_data="open_mini_app")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup)
    
    async def show_about_us(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞–∑–¥–µ–ª '–û –Ω–∞—Å'"""
        about_text = """–ò–Ω–æ–≥–¥–∞ –≤—Å–µ, —á—Ç–æ –Ω—É–∂–Ω–æ - —ç—Ç–æ –æ—Ç–∫–ª—é—á–∏—Ç—å –º—ã—Å–ª–∏ –∏ –ø—Ä–æ—Å—Ç–æ —É–ª—ã–±–∞—Ç—å—Å—è. üòä –ó–¥–µ—Å—å —Ç—ã –Ω–µ –Ω–∞–π–¥–µ—à—å –º–µ—Å—Ç–æ –¥–ª—è —Ñ–∏–ª–æ—Å–æ—Ñ—Å–∫–∏—Ö —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. –ú–æ–∏ —Å–≤–µ—á–∏ –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥–æ–π–¥—É—Ç –¥–ª—è –¥—É—à–µ–≤–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞ –≤ –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–µ –∏–ª–∏ –≤ –∫–æ–º–ø–∞–Ω–∏–∏. ü§ó –ê –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –∑–∞–ø–∞—Ö–∏, –ø–æ–º–æ–≥—É—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, –æ—Ç–≤–ª–µ—á—å—Å—è –æ—Ç –∑–∞–±–æ—Ç –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –≤–µ—á–µ—Ä —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º. üïØÔ∏è

–ë—ã–≤–∞—é—Ç –¥–Ω–∏, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è —Å–ø—Ä—è—Ç–∞—Ç—å—Å—è –æ—Ç –∑–∞–±–æ—Ç, –∑–∞–±—Ä–∞—Ç—å—Å—è –ø–æ–¥ –ø–ª–µ–¥ —Å —á–∞—à–∫–æ–π —á–∞—è ‚òï, –∏ –∑–∞–∂–µ—á—å —Å–≤–µ—á—É, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç —É—Å–∏–ª–∏–π, –Ω–æ –ø—Ä–∏ —ç—Ç–æ–º –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–¥–Ω–∏–º–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ. üòå –ò–º–µ–Ω–Ω–æ –¥–ª—è —Ç–∞–∫–∏—Ö —Å–ª—É—á–∞–µ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∞ —ç—Ç–∞ –ø–æ–¥–±–æ—Ä–∫–∞.

–¢–µ–±—è –∂–¥—É—Ç –ª–µ–≥–∫–∏–µ, —Ç–µ–ø–ª—ã–µ, –º–µ—Å—Ç–∞–º–∏ —Ä–æ–º–∞–Ω—Ç–∏—á–Ω—ã–µ –Ω–æ—Ç–∫–∏ –∞—Ä–æ–º–∞—Ç–∞ —Å–≤–µ—á–µ–π - –∏–¥–µ–∞–ª—å–Ω—ã–µ —Å–ø—É—Ç–Ω–∏–∫–∏ –¥–ª—è —É—é—Ç–Ω–æ–≥–æ –≤–µ—á–µ—Ä–∞. üåô‚ú®"""
        
        keyboard = [
            [InlineKeyboardButton("‚ùì –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã", callback_data="faq")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(about_text, reply_markup=reply_markup)
    
    async def show_main_channel(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª"""
        text = "–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –¥–ª—è –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:"
        keyboard = [
            [InlineKeyboardButton("üì¢ @daryreflexive1999", url="https://t.me/daryreflexive1999")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å FAQ"""
        text = "–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã:"
        keyboard = [
            [InlineKeyboardButton("üöö –°–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–Ω–∏–º–∞–µ—Ç –¥–æ—Å—Ç–∞–≤–∫–∞?", callback_data="faq_delivery")],
            [InlineKeyboardButton("üïØÔ∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏", callback_data="faq_care")],
            [InlineKeyboardButton("ü™î –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å –≤–æ—Å–∫?", callback_data="faq_wax")],
            [InlineKeyboardButton("üé® –ú–æ–∂–Ω–æ –ª–∏ –≤—ã–±—Ä–∞—Ç—å —Ü–≤–µ—Ç —Å–≤–µ—á–∏?", callback_data="faq_color")],
            [InlineKeyboardButton("‚ú® –ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å —Å–≤–µ—á—É —É–Ω–∏–∫–∞–ª—å–Ω–æ–π?", callback_data="faq_unique")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_about")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_delivery(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –¥–æ—Å—Ç–∞–≤–∫–µ"""
        text = "–û–±—ã—á–Ω–æ –æ—Ç 2-—Ö –¥–Ω–µ–π (–∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è). üì¶"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_care(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞–º—è—Ç–∫—É –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏"""
        text = """‚ö†Ô∏è –ü–∞–º—è—Ç–∫–∞ –ø–æ —É—Ö–æ–¥—É –∑–∞ —Å–≤–µ—á–∞–º–∏:

‚Ä¢ –ü–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –∑–∞–∂–µ—á—å —Å–≤–µ—á—É, –æ–±—Ä–µ–∂—å—Ç–µ —Ñ–∏—Ç–∏–ª—å (0,5‚Äì0,6 —Å–º). ‚úÇÔ∏è
‚Ä¢ –ó–∞–∂–∏–≥–∞–π—Ç–µ —Å–≤–µ—á—É –º–∏–Ω–∏–º—É–º –Ω–∞ —á–∞—Å, —á—Ç–æ–±—ã –≤–æ—Å–∫ —Ä–∞—Å—Ç–∞—è–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ. ‚è∞
‚Ä¢ –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –∑–∞–∂–∏–≥–∞–Ω–∏–µ ‚Äî –Ω–µ —Ä–∞–Ω–µ–µ, —á–µ–º —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞. ‚è≥
‚Ä¢ –ù–µ –¥–µ—Ä–∂–∏—Ç–µ —Å–≤–µ—á—É –¥–æ–ª—å—à–µ 4 —á–∞—Å–æ–≤. üïê
‚Ä¢ –ì–∞—Å–∏—Ç–µ –∫—Ä—ã—à–∫–æ–π. üõ°Ô∏è
‚Ä¢ –ù–µ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –±–µ–∑ –ø—Ä–∏—Å–º–æ—Ç—Ä–∞. üëÄ
‚Ä¢ –•—Ä–∞–Ω–∏—Ç—å –≤ –ø—Ä–æ—Ö–ª–∞–¥–Ω–æ–º, —Å—É—Ö–æ–º –º–µ—Å—Ç–µ, –≤–¥–∞–ª–∏ –æ—Ç —Å–æ–ª–Ω—Ü–∞. üå°Ô∏è"""
        
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_wax(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ –≤–æ—Å–∫–µ"""
        text = "–î–∞, –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–µ–≤—ã–π –∏ –∫–æ–∫–æ—Å–æ–≤—ã–π –≤–æ—Å–∫. üå±ü••"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_color(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ —Ü–≤–µ—Ç–µ —Å–≤–µ—á–∏"""
        text = "–î–∞, –¥–æ –¥–≤—É—Ö –æ—Ç—Ç–µ–Ω–∫–æ–≤ –∏–ª–∏ –≥—Ä–∞–¥–∏–µ–Ω—Ç. üåà"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def show_faq_unique(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–≤–µ—Ç –æ–± —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ —Å–≤–µ—á–∏"""
        text = "–ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Å—É—Ö–æ—Ü–≤–µ—Ç—ã, —Ñ—Ä—É–∫—Ç—ã, —Å–ª–∞–¥–æ—Å—Ç–∏, —à–∏–º–º–µ—Ä –∏–ª–∏ –º–∏–Ω–µ—Ä–∞–ª—ã. üå∏üçì‚ú®"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="faq")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def open_mini_app(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫—Ä—ã—Ç—å –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
        text = "–û—Ç–∫—Ä—ã–≤–∞–µ–º –º–∞–≥–∞–∑–∏–Ω..."
        keyboard = [
            [InlineKeyboardButton("üõí –û—Ç–∫—Ä—ã—Ç—å –º–∞–≥–∞–∑–∏–Ω", web_app=WebAppInfo(url="https://soda2l.github.io/daryrei-mini-app/"))],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(text, reply_markup=reply_markup)
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "start_shopping":
            await self.show_main_menu(update, context)
        elif data == "about_us":
            await self.show_about_us(update, context)
        elif data == "main_channel":
            await self.show_main_channel(update, context)
        elif data == "faq":
            await self.show_faq(update, context)
        elif data == "back_to_main":
            await self.show_main_menu(update, context)
        elif data == "back_to_about":
            await self.show_about_us(update, context)
        elif data == "faq_delivery":
            await self.show_faq_delivery(update, context)
        elif data == "faq_care":
            await self.show_faq_care(update, context)
        elif data == "faq_wax":
            await self.show_faq_wax(update, context)
        elif data == "faq_color":
            await self.show_faq_color(update, context)
        elif data == "faq_unique":
            await self.show_faq_unique(update, context)
        elif data == "open_mini_app":
            await self.open_mini_app(update, context)
    
    async def handle_web_app_data(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp"""
        try:
            logger.info("=== –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï –û–¢ WEBAPP ===")
            logger.info(f"Update ID: {update.update_id}")
            logger.info(f"Message ID: {update.message.message_id if update.message else 'None'}")
            logger.info(f"User ID: {update.effective_user.id if update.effective_user else 'None'}")
            logger.info(f"WebApp data exists: {hasattr(update.message, 'web_app_data') and update.message.web_app_data is not None}")
            
            if not update.message or not update.message.web_app_data:
                logger.error("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
                await update.message.reply_text("‚ùå –ù–µ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç WebApp
            web_app_data = update.message.web_app_data.data
            logger.info(f"Raw web_app_data: {web_app_data}")
            logger.info(f"WebApp data type: {type(web_app_data)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON
            try:
                data = json.loads(web_app_data)
                logger.info(f"Parsed data: {data}")
            except json.JSONDecodeError as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
                logger.error(f"–ü—Ä–æ–±–ª–µ–º–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {repr(web_app_data)}")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö
            if data.get('type') == 'order':
                logger.info("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–∫–∞–∑...")
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
                await self.send_order_to_group(update, context, data)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(
                    "‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –æ–ø–ª–∞—Ç—ã –∏ –¥–æ—Å—Ç–∞–≤–∫–∏.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", web_app=WebAppInfo(url="https://soda2l.github.io/daryrei-mini-app/"))
                    ]])
                )
            else:
                logger.warning(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp: {data.get('type')}")
                await update.message.reply_text(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö: {data.get('type')}")
                
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –æ—Ç WebApp: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            logger.error(f"Traceback: {e.__traceback__}")
            await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
    
    async def handle_all_updates(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏"""
        logger.info(f"=== –ü–û–õ–£–ß–ï–ù–û –û–ë–ù–û–í–õ–ï–ù–ò–ï ===")
        logger.info(f"Update type: {update.update_id}")
        logger.info(f"Update: {update}")
        
        # –ü–µ—Ä–µ–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∞–ª—å—à–µ
        return False
    
    async def handle_all_messages(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            logger.info(f"=== –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö ===")
            logger.info(f"Update ID: {update.update_id}")
            logger.info(f"Update: {update}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ WebApp –¥–∞–Ω–Ω—ã–µ
            if hasattr(update.message, 'web_app_data') and update.message.web_app_data:
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã WebApp –¥–∞–Ω–Ω—ã–µ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!")
                await self.handle_web_app_data(update, context)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            if update.message and update.message.text:
                logger.info(f"–¢–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {update.message.text}")
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑–æ–º
                if update.message.text.startswith("üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó"):
                    logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ!")
                    await self.handle_text_message(update, context)
                    return
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∑–∞–∫–∞–∑, –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º
        return False
    
    async def send_order_to_group(self, update: Update, context: ContextTypes.DEFAULT_TYPE, data: dict):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É"""
        try:
            message = data.get('message', '')
            group_id = data.get('groupId', ORDER_GROUP_ID)
            
            logger.info(f"=== –û–¢–ü–†–ê–í–ö–ê –ó–ê–ö–ê–ó–ê –í –ì–†–£–ü–ü–£ ===")
            logger.info(f"Message length: {len(message)}")
            logger.info(f"Message preview: {message[:200]}...")
            logger.info(f"Group ID: {group_id}")
            logger.info(f"ORDER_GROUP_ID: {ORDER_GROUP_ID}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—É—Å—Ç–æ–µ
            if not message.strip():
                logger.error("–ü—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –≥—Ä—É–ø–ø—É")
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞: –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞")
                return
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É
            sent_message = await context.bot.send_message(
                chat_id=group_id,
                text=message,
                parse_mode='HTML'
            )
            
            logger.info(f"‚úÖ –ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É {group_id}")
            logger.info(f"Sent message ID: {sent_message.message_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞ –≤ –≥—Ä—É–ø–ø—É: {e}")
            logger.error(f"–¢–∏–ø –æ—à–∏–±–∫–∏: {type(e)}")
            logger.error(f"–î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏: {str(e)}")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML
            try:
                logger.info("–ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
                await context.bot.send_message(
                    chat_id=group_id,
                    text=message
                )
                logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –±–µ–∑ HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            except Exception as e2:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –±–µ–∑ HTML: {e2}")
                await update.message.reply_text(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞–∫–∞–∑–∞: {str(e)}")
    
    async def handle_text_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (—Ä–µ–∑–µ—Ä–≤–Ω—ã–π –¥–ª—è –∑–∞–∫–∞–∑–æ–≤)"""
        try:
            message_text = update.message.text
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∑–∞–∫–∞–∑–æ–º (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å "üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó")
            if message_text.startswith("üõí –ù–û–í–´–ô –ó–ê–ö–ê–ó"):
                logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –∑–∞–∫–∞–∑ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –≤ –≥—Ä—É–ø–ø—É
                await context.bot.send_message(
                    chat_id=ORDER_GROUP_ID,
                    text=message_text,
                    parse_mode='HTML'
                )
                
                await update.message.reply_text(
                    "‚úÖ –ó–∞–∫–∞–∑ –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ –≥—Ä—É–ø–ø—É! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.",
                    reply_markup=InlineKeyboardMarkup([[
                        InlineKeyboardButton("üõí –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∫—É–ø–∫–∏", web_app=WebAppInfo(url="https://soda2l.github.io/daryrei-mini-app/"))
                    ]])
                )
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
                await self.show_main_menu(update, context)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å update –∏ message, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if update and update.effective_message:
            try:
                await update.effective_message.reply_text(
                    "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
                )
            except Exception as e:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {e}")
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ DaryRei...")
        self.application.run_polling()

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
bot = DaryReiBot()

# –î–ª—è Railway/Heroku - —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º app
app = bot.http_app

if __name__ == "__main__":
    bot.run()
