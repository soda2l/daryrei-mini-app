#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
"""

import json
import os
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –∫–∞—Ç–∞–ª–æ–≥–∞
CATALOG_FILE = "catalog.json"

def load_catalog():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        if os.path.exists(CATALOG_FILE):
            with open(CATALOG_FILE, 'r', encoding='utf-8') as f:
                catalog = json.load(f)
            return catalog
        else:
            return {"categories": [], "products": []}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return {"categories": [], "products": []}

def test_category_products():
    """–¢–µ—Å—Ç —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º...")
    
    catalog = load_catalog()
    categories = catalog.get("categories", [])
    products = catalog.get("products", [])
    
    print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–∞—Ç–∞–ª–æ–≥–∞:")
    print(f"   üìÅ –ö–∞—Ç–µ–≥–æ—Ä–∏–π: {len(categories)}")
    print(f"   üì¶ –¢–æ–≤–∞—Ä–æ–≤: {len(products)}")
    
    if not categories:
        print("‚ùå –í –∫–∞—Ç–∞–ª–æ–≥–µ –Ω–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π")
        return False
    
    print(f"\nüìã –¢–æ–≤–∞—Ä—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:")
    
    for category in categories:
        category_id = category["id"]
        category_name = category["name"]
        
        # –ù–∞—Ö–æ–¥–∏–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        products_in_category = [p for p in products if p.get("category") == category_id]
        count = len(products_in_category)
        
        print(f"\nüìÅ {category_name} ({count} —Ç–æ–≤–∞—Ä–æ–≤):")
        
        if products_in_category:
            for i, product in enumerate(products_in_category, 1):
                print(f"   {i}. {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')} - {product.get('price', '–ë–µ–∑ —Ü–µ–Ω—ã')} ‚ÇΩ")
        else:
            print("   (–Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤)")
    
    print(f"\n‚úÖ –ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≥–æ—Ç–æ–≤!")
    print(f"\nüìã –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:")
    print(f"1. –û—Ç–ø—Ä–∞–≤—å /admin")
    print(f"2. –í—ã–±–µ—Ä–∏ '–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)'")
    print(f"3. –í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é")
    print(f"4. –í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    
    return True

def test_commands():
    """–¢–µ—Å—Ç –∫–æ–º–∞–Ω–¥"""
    print(f"\nüîß –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
    print(f"‚Ä¢ /delete_product - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–≤—Å–µ)")
    print(f"‚Ä¢ /delete_product_by_category - –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏)")
    print(f"‚Ä¢ /admin - –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    
    print(f"\nüì± –í –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏:")
    print(f"‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–≤—Å–µ) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã")
    print(f"‚Ä¢ –£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä (–ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏) - –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤")
    
    return True

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç –Ω–æ–≤–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤")
    print("=" * 50)
    
    success1 = test_category_products()
    success2 = test_commands()
    
    if success1 and success2:
        print(f"\n‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        print(f"\nüöÄ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print(f"1. –ó–∞–ø—É—Å—Ç–∏ –±–æ—Ç–∞: python bot.py")
        print(f"2. –û—Ç–ø—Ä–∞–≤—å /admin")
        print(f"3. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π –Ω–æ–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å —É–¥–∞–ª–µ–Ω–∏—è")
    else:
        print(f"\n‚ùå –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ—à–ª–∏")

if __name__ == "__main__":
    main()
