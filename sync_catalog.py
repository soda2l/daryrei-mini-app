#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞ –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —Å–µ—Ä–≤–µ—Ä–Ω–æ–π –≤–µ—Ä—Å–∏—è–º–∏
"""

import json
import os
import requests
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
LOCAL_CATALOG_FILE = "catalog.json"
SERVER_API_URL = "https://daryreibot.duckdns.org/api/catalog"

def load_local_catalog():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥"""
    try:
        if os.path.exists(LOCAL_CATALOG_FILE):
            with open(LOCAL_CATALOG_FILE, 'r', encoding='utf-8') as f:
                catalog = json.load(f)
            logger.info(f"–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(catalog.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
            return catalog
        else:
            logger.warning("–õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return None

def load_server_catalog():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ —Å —Å–µ—Ä–≤–µ—Ä–∞"""
    try:
        response = requests.get(SERVER_API_URL, timeout=10)
        if response.status_code == 200:
            catalog = response.json()
            logger.info(f"–°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –∑–∞–≥—Ä—É–∂–µ–Ω: {len(catalog.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
            return catalog
        else:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: HTTP {response.status_code}")
            return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return None

def compare_catalogs(local_catalog, server_catalog):
    """–°—Ä–∞–≤–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏"""
    if not local_catalog or not server_catalog:
        return None, None
    
    local_products = {p['id']: p for p in local_catalog.get('products', [])}
    server_products = {p['id']: p for p in server_catalog.get('products', [])}
    
    local_only = {k: v for k, v in local_products.items() if k not in server_products}
    server_only = {k: v for k, v in server_products.items() if k not in local_products}
    
    logger.info(f"–¢–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –≤ –ª–æ–∫–∞–ª—å–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ: {len(local_only)}")
    logger.info(f"–¢–æ–≤–∞—Ä—ã —Ç–æ–ª—å–∫–æ –≤ —Å–µ—Ä–≤–µ—Ä–Ω–æ–º –∫–∞—Ç–∞–ª–æ–≥–µ: {len(server_only)}")
    
    return local_only, server_only

def save_catalog(catalog, filename):
    """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞—Ç–∞–ª–æ–≥ –≤ —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(catalog, f, ensure_ascii=False, indent=2)
        logger.info(f"–ö–∞—Ç–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")
        return True
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞: {e}")
        return False

def sync_catalogs():
    """–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–∞–ª–æ–≥–∏"""
    print("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞—Ç–∞–ª–æ–≥–æ–≤...")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
    local_catalog = load_local_catalog()
    server_catalog = load_server_catalog()
    
    if not local_catalog and not server_catalog:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∏ –æ–¥–∏–Ω –∫–∞—Ç–∞–ª–æ–≥")
        return False
    
    if not local_catalog:
        print("‚ö†Ô∏è –õ–æ–∫–∞–ª—å–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π")
        return save_catalog(server_catalog, LOCAL_CATALOG_FILE)
    
    if not server_catalog:
        print("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π")
        return True
    
    # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
    local_only, server_only = compare_catalogs(local_catalog, server_catalog)
    
    if not local_only and not server_only:
        print("‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∫–∞—Ç–∞–ª–æ–≥–∏
    merged_catalog = local_catalog.copy()
    merged_products = {p['id']: p for p in merged_catalog.get('products', [])}
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–≤–∞—Ä—ã —Å —Å–µ—Ä–≤–µ—Ä–∞, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ
    for product_id, product in server_only.items():
        merged_products[product_id] = product
        print(f"‚ûï –î–æ–±–∞–≤–ª–µ–Ω —Ç–æ–≤–∞—Ä —Å —Å–µ—Ä–≤–µ—Ä–∞: {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
    
    merged_catalog['products'] = list(merged_products.values())
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω—ã–π –∫–∞—Ç–∞–ª–æ–≥
    if save_catalog(merged_catalog, LOCAL_CATALOG_FILE):
        print(f"‚úÖ –ö–∞—Ç–∞–ª–æ–≥–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã: {len(merged_catalog.get('products', []))} —Ç–æ–≤–∞—Ä–æ–≤")
        return True
    else:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–Ω–æ–≥–æ –∫–∞—Ç–∞–ª–æ–≥–∞")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –°–∫—Ä–∏–ø—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–æ–≤")
    print("=" * 50)
    
    success = sync_catalogs()
    
    if success:
        print("\n‚úÖ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ:")
        print("1. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –ª–æ–∫–∞–ª—å–Ω–æ: python bot.py")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ —Ç–æ–≤–∞—Ä—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        print("3. –ï—Å–ª–∏ –Ω—É–∂–Ω–æ, —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å catalog.json –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
    else:
        print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        print("\nüîß –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ")
        print("2. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞")
        print("3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ–∞–π–ª–∞–º")

if __name__ == "__main__":
    main()
